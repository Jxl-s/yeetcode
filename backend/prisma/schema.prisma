// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

enum SubmitStatus {
  ACCEPTED
  WRONG_ANSWER
  TIME_LIMIT_EXCEEDED
  MEMORY_LIMIT_EXCEEDED
  RUNTIME_ERROR
  COMPILATION_ERROR
}

enum ProblemType {
  ALGO
  DESIGN
}

model User {
  id    Int    @id @default(autoincrement())
  email String @unique
  role  Role   @default(USER)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  profile     Profile?
  tokens      RefreshToken[]
  submissions Submission[]
}

model Profile {
  user_id  Int    @id
  username String @unique

  picture String
  bio     String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user User @relation(fields: [user_id], references: [id])
}

model RefreshToken {
  user_id       Int
  refresh_token String @unique

  expires_at DateTime
  created_at DateTime @default(now())

  user User @relation(fields: [user_id], references: [id])
}

model Problem {
  id     String @id
  number Int    @default(autoincrement())

  title       String
  description String
  difficulty  Difficulty
  type        ProblemType
  metadata    String // will be JSON for the arguments and return types

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  tags        Tags[]
  submissions Submission[]
  test_cases  TestCase[]
}

model Tags {
  id       String    @id
  problems Problem[]
}

model Submission {
  id          String          @id
  user_id     Int
  problem_id  String
  language_id Int
  code        String
  status      SubmitStatus

  // For success
  runtime Decimal?
  memory  Decimal?
  passed  Int

  // For failure
  error        String?
  wrong_output String?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user     User     @relation(fields: [user_id], references: [id])
  problem  Problem  @relation(fields: [problem_id], references: [id])
  language Language @relation(fields: [language_id], references: [id])
}

model Language {
  id   Int    @id
  name String

  submissions Submission[]
}

model TestCase {
  id         Int
  problem_id String

  input  String
  output String

  problem Problem @relation(fields: [problem_id], references: [id])

  @@id([problem_id, id])
}
